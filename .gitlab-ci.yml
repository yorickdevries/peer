include:
  template: SAST.gitlab-ci.yml

image: node:14

variables:
  MYSQL_ROOT_PASSWORD: password
  MYSQL_DATABASE: peer
  MYSQL_USER: peer
  MYSQL_PASSWORD: password
  MYSQL_HOST: mariadb
  SAST_EXCLUDED_ANALYZERS: "bandit, brakeman, gosec, spotbugs, flawfinder, phpcs-security-audit, security-code-scan, sobelow, pmd-apex, kubesec, mobsf"

stages:
    - static-analysis
    - build
    - test
    - migration
    - start
    - sast
    - deploy

lint-server:
  stage: static-analysis
  variables:
    NODE_ENV: development
  script:
  - cd server && npm install
  - npm run lint
  only:
  - merge_requests
  - pushes

lint-client:
  stage: static-analysis
  variables:
    NODE_ENV: development
  script:
  - cd client && npm install
  - npm run lint
  only:
  - merge_requests
  - pushes

build-server:
  stage: build
  variables:
    NODE_ENV: production
  script:
  - cd server && npm install
  - npm run build
  only:
  - merge_requests
  - pushes

build-client:
  stage: build
  variables:
    NODE_ENV: production
  script:
  - cd client && npm install
  - npm run build
  only:
  - merge_requests
  - pushes

test:
  stage: test
  variables:
    NODE_ENV: test
  services:
  - mariadb:10.1
  script:
  - cd server && npm install
  - npm run test
  only:
  - merge_requests
  - pushes

coverage:
  stage: test
  variables:
    NODE_ENV: test
  allow_failure: true
  services:
  - mariadb:10.1
  script:
  - cd server && npm install
  - npm run coverage
  only:
  - merge_requests
  - pushes

migration:
  stage: migration
  variables:
    NODE_ENV: production
  services:
  - mariadb:10.1
  script:
  - cd server && npm install
  - npm run build
  - npm run typeorm:migration:run
  only:
  - merge_requests
  - pushes

start-server:
  stage: start
  variables:
    NODE_ENV: production
  services:
  - mariadb:10.1
  script:
  - cd server && npm install
  - npm run build
  - npm run typeorm:migration:run
  - timeout 60s npm run start || if [ $? -eq 124 ]; then (exit 0); else (exit 1); fi
  only:
  - merge_requests
  - pushes

eslint-sast:
  stage: sast
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule"

nodejs-scan-sast:
  stage: sast
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule"

semgrep-sast:
  stage: sast
  rules:
  - if: $CI_PIPELINE_SOURCE == "schedule"

deploy-staging:
  stage: deploy
  variables:
    DEPLOY_PATH: "/var/www/peer"
  needs:
    - test
    - migration
    - start-server
  before_script:
    - apt-get update -y
    - apt-get install rsync -y
    - 'which ssh-agent || ( apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY_STAGING" | base64 -d)
    - mkdir -p ~/.ssh
    - ssh-keyscan eiptest.ewi.tudelft.nl >> ~/.ssh/known_hosts
    - '[[ -f /.dockerenv ]] && echo -e "Host *\n\tStrictHostKeyChecking no\n\n" > ~/.ssh/config'
  script:
    - export TIMESTAMP="$(date '+%Y%m%d%H%M%S')"
    - "rsync -avh -e ssh . deployer-peer@$CI_ENVIRONMENT_URL:$DEPLOY_PATH/releases/$TIMESTAMP"
    - 'ssh deployer-peer@$CI_ENVIRONMENT_URL "cd $DEPLOY_PATH && ./deploy.sh $TIMESTAMP"'
  environment:
    name: staging
    url: peer.eiptest.ewi.tudelft.nl
  only:
    - dev
